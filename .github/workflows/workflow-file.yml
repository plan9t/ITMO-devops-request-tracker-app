name: CI

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install backend dependencies
        run: go mod download
        working-directory: backend

      - name: Run backend tests
        run: go test .
        working-directory: backend

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.1.0'

      - name: Install frontend dependencies
        run: npm install
        working-directory: frontend

      - name: Run frontend tests
        run: npm test
        working-directory: frontend

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # If you wish to fail your job when the Quality Gate is red, uncomment the
        # following lines. This would typically be used to fail a deployment.
        # - uses: sonarsource/sonarqube-quality-gate-action@master
        #   timeout-minutes: 5
        #   env:
        #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install backend dependencies
        run: go mod download
        working-directory: backend

      - name: Build application
        run: go build -o request-tracker-app
        working-directory: backend

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Container Registry
        uses: docker/login-action@v1
        with:
          registry: cr.yandex # Замените на ваш реестр контейнеров.
          username: ${{ secrets.YANDEX_REGISTRY_USERNAME }} # Ваш секрет с именем пользователя реестра.
          password: ${{ secrets.YANDEX_REGISTRY_PASSWORD }} # Ваш секрет с паролем реестра.

      - name: Build Docker image for frontend
        run: |
          docker build . --file frontend/Dockerfile --tag cr.yandex/crp8ui9gahh6vsr4j039/app-frontend:${{ github.sha }}

      - name: Build Docker image for backend
        run: |
          docker build . --file backend/Dockerfile --tag cr.yandex/crp8ui9gahh6vsr4j039/app-backend:${{ github.sha }}

      - name: Push Docker images to Container Registry
        run: |
          docker push cr.yandex/crp8ui9gahh6vsr4j039/app-frontend:${{ github.sha }}
          docker push cr.yandex/crp8ui9gahh6vsr4j039/app-backend:${{ github.sha }}

      - name: Set up Kubeconfig
        run: |
          echo "${{ secrets.KUBERNETES_SECRET }}" > /tmp/kubeconfig.yaml

      - name: Deploy to Kubernetes for frontend
        run: |
          kubectl apply -f k8s/frontend-service.yaml --namespace=default # Укажите путь к вашему манифесту.
          kubectl set image deployment/frontend-deployment frontend-container=cr.yandex/crp8ui9gahh6vsr4j039/app-frontend:${{ github.sha }} --namespace=default # Обновите образ контейнера.

      - name: Deploy to Kubernetes for backend
        run: |
          kubectl apply -f k8s/backend-service.yaml --namespace=default # Укажите путь к вашему манифесту.
          kubectl set image deployment/backend-deployment backend-container=cr.yandex/crp8ui9gahh6vsr4j039/app-backend:${{ github.sha }} --namespace=default # Обновите образ контейнера.