terraform {
  required_providers {
    virtualbox = {
      source  = "terra-farm/virtualbox"
      version = "0.2.2-alpha.1"
    }
  }
}

provider "virtualbox" {}

# Установка VirtualBox и Vagrant
resource "null_resource" "install_dependencies" {
  provisioner "local-exec" {
    command = <<EOT
      sudo apt-get update
      sudo apt-get install -y virtualbox virtualbox-dkms linux-headers-$(uname -r)
      curl -s -L https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      echo "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
      sudo apt-get update
      sudo apt-get install -y vagrant
    EOT
  }
}

# Создание хост-только адаптера
resource "null_resource" "create_hostonly_network" {
  provisioner "local-exec" {
    command = <<EOT
      VBoxManage hostonlyif create
    EOT
  }

  depends_on = [null_resource.install_dependencies]
}

# Создание Vagrantfile для управления виртуальной машиной
resource "null_resource" "create_vagrantfile" {
  provisioner "local-exec" {
    command = <<EOT
      echo 'Vagrant.configure("2") do |config|' > Vagrantfile
      echo '  config.vm.box = "ubuntu/bionic64"' >> Vagrantfile
      echo '  config.vm.network "private_network", type: "dhcp"' >> Vagrantfile
      echo '  config.vm.provision "shell", inline: <<-SHELL' >> Vagrantfile
      echo '    apt-get update' >> Vagrantfile
      echo '    apt-get install -y apt-transport-https ca-certificates curl software-properties-common' >> Vagrantfile
      echo '    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -' >> Vagrantfile
      echo '    add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"' >> Vagrantfile
      echo '    apt-get update' >> Vagrantfile
      echo '    apt-get install -y docker-ce' >> Vagrantfile
      echo '    systemctl start docker' >> Vagrantfile
      echo '    systemctl enable docker' >> Vagrantfile
      echo '  SHELL' >> Vagrantfile
      echo 'end' >> Vagrantfile
    EOT
  }

  depends_on = [null_resource.create_hostonly_network]
}

# Задержка для ожидания установки Vagrant
resource "null_resource" "wait_for_vagrant" {
  provisioner "local-exec" {
    command = "sleep 10" # Увеличьте время ожидания, если нужно
  }

  depends_on = [null_resource.create_vagrantfile]
}

# Запуск Vagrant для создания виртуальной машины
resource "null_resource" "vagrant_up" {
  provisioner "local-exec" {
    command = "bash -c 'vagrant up'" # Используем bash для явного вызова
  }

  depends_on = [null_resource.wait_for_vagrant]
}













tterraform {
  required_providers {
    libvirt = {
      source  = "dmacvicar/libvirt"
      version = ">= 0.6.0"
    }
  }
}

provider "libvirt" {
  uri = "qemu:///system"
}

# Установка KVM и зависимостей
resource "null_resource" "install_kvm" {
  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils",
      "sudo systemctl enable libvirtd",
      "sudo systemctl start libvirtd"
    ]

    connection {
      type        = "ssh"
      user        = "ubuntu"  # Замените на ваше имя пользователя
      private_key = file("~/.ssh/id_rsa")  # Убедитесь, что путь правильный
      host        = "127.0.0.1"  # Используйте локальный хост
    }
  }
}

# Создание виртуального диска
resource "libvirt_volume" "my_volume" {
  name   = "my_volume.img"
  pool   = "default"
  size   = 10 * 1024 * 1024 * 1024
  format = "qcow2"
}

# Создание виртуальной машины
resource "libvirt_domain" "my_domain" {
  name   = "my_vm"
  memory = 1024
  vcpu   = 1

  disk {
    volume_id = libvirt_volume.my_volume.id
  }

  network_interface {
    network_name = "default"
  }

  cloud_init {
    user_data = <<-EOF
      #cloud-config
      packages:
        - docker.io
      runcmd:
        - systemctl start docker
        - systemctl enable docker
    EOF
  }

  depends_on = [null_resource.install_kvm]
}









Давай сначала.

Что мне нужно. У меня есть ТОЛЬКО установленный terraform на моем сервере.
Необходимо, чтобы этот Terraform САМОСТОЯТЕЛЬНО:
1. Скачал, установил и развернул виртуальную машину на моём сервере. В том числе и vagrant, который нужен для работы VirtualBox
2. Внутри развёрнутой виртуальной машины скачал и установил докер.


НАДО ТЕСТИТЬ МБ РАБОАТТЕ

